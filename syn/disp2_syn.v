/* Generated by Yosys 0.9 (git sha1 UNKNOWN, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os) */

(* dynports =  1  *)
(* src = "./src/fifo.v:22" *)
module \$paramod\fifo_4x8_syn\DATA_SIZE=8\MAIN_SIZE=4 (data_out_pop, almost_full, almost_empty, Fifo_full, fifo_empty, fifo_error, clk, reset, read, write, data_in_push);
  (* src = "./src/fifo.v:110" *)
  wire [7:0] _000_;
  (* src = "./src/fifo.v:110" *)
  wire [7:0] _001_;
  (* src = "./src/fifo.v:110" *)
  wire [3:0] _002_;
  (* src = "./src/fifo.v:110" *)
  wire [3:0] _003_;
  (* src = "./src/fifo.v:63" *)
  wire _004_;
  (* src = "./src/fifo.v:63" *)
  wire _005_;
  (* src = "./src/fifo.v:63" *)
  wire _006_;
  (* src = "./src/fifo.v:63" *)
  wire _007_;
  (* src = "./src/fifo.v:63" *)
  wire _008_;
  (* src = "./src/fifo.v:63" *)
  wire _009_;
  (* src = "./src/fifo.v:63" *)
  wire _010_;
  (* src = "./src/fifo.v:63" *)
  wire _011_;
  (* src = "./src/fifo.v:63" *)
  wire _012_;
  (* src = "./src/fifo.v:63" *)
  wire _013_;
  (* src = "./src/fifo.v:63" *)
  wire _014_;
  (* src = "./src/fifo.v:63" *)
  wire _015_;
  (* src = "./src/fifo.v:63" *)
  wire _016_;
  (* src = "./src/fifo.v:124" *)
  (* unused_bits = "4" *)
  wire [31:0] _017_;
  (* src = "./src/fifo.v:134" *)
  (* unused_bits = "4" *)
  wire [31:0] _018_;
  (* src = "./src/fifo.v:138" *)
  (* unused_bits = "8" *)
  wire [31:0] _019_;
  wire [3:0] _020_;
  wire [1:0] _021_;
  wire [3:0] _022_;
  wire [1:0] _023_;
  wire [1:0] _024_;
  wire [1:0] _025_;
  wire [15:0] _026_;
  wire [7:0] _027_;
  wire [3:0] _028_;
  wire [15:0] _029_;
  wire [7:0] _030_;
  wire [3:0] _031_;
  wire _032_;
  wire [1:0] _033_;
  wire [7:0] _034_;
  wire [3:0] _035_;
  wire [3:0] _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  (* src = "./src/fifo.v:78" *)
  wire _041_;
  (* src = "./src/fifo.v:91" *)
  wire _042_;
  (* src = "./src/fifo.v:86" *)
  wire _043_;
  (* src = "./src/fifo.v:82" *)
  wire _044_;
  (* src = "./src/fifo.v:103" *)
  wire _045_;
  (* src = "./src/fifo.v:103" *)
  wire _046_;
  (* src = "./src/fifo.v:127" *)
  wire _047_;
  (* src = "./src/fifo.v:86" *)
  wire _048_;
  (* src = "./src/fifo.v:127" *)
  wire _049_;
  (* src = "./src/fifo.v:86" *)
  wire _050_;
  wire [7:0] _051_;
  wire [7:0] _052_;
  wire [7:0] _053_;
  wire [7:0] _054_;
  wire [3:0] _055_;
  wire [3:0] _056_;
  wire [3:0] _057_;
  wire [3:0] _058_;
  wire _059_;
  (* src = "./src/fifo.v:148" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _060_;
  (* src = "./src/fifo.v:124|./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _061_;
  (* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "7" *)
  wire [31:0] _062_;
  (* src = "./src/fifo.v:154|./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _063_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2 4 5 6" *)
  wire [31:0] _064_;
  wire [31:0] _065_;
  wire _066_;
  wire _067_;
  (* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:203" *)
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire _070_;
  (* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:222" *)
  wire _071_;
  (* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:222" *)
  wire _072_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _073_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _074_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _075_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _076_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _077_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _078_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _079_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _080_;
  (* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)
  wire _081_;
  (* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)
  wire _082_;
  (* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)
  wire _083_;
  (* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:229" *)
  wire _084_;
  (* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:229" *)
  wire _085_;
  (* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:229" *)
  wire _086_;
  (* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:229" *)
  wire _087_;
  (* src = "./src/fifo.v:28" *)
  output Fifo_full;
  (* src = "./src/fifo.v:27" *)
  output almost_empty;
  (* src = "./src/fifo.v:26" *)
  output almost_full;
  (* src = "./src/fifo.v:32" *)
  input clk;
  (* src = "./src/fifo.v:44" *)
  wire [7:0] data_count;
  (* src = "./src/fifo.v:36" *)
  input [7:0] data_in_push;
  (* src = "./src/fifo.v:42" *)
  wire [7:0] data_out;
  (* src = "./src/fifo.v:25" *)
  output [7:0] data_out_pop;
  (* src = "./src/fifo.v:29" *)
  output fifo_empty;
  (* src = "./src/fifo.v:30" *)
  output fifo_error;
  (* src = "./src/fifo.v:45" *)
  wire [3:0] rd_ptr;
  (* src = "./src/fifo.v:34" *)
  input read;
  (* src = "./src/fifo.v:33" *)
  input reset;
  (* src = "./src/fifo.v:46" *)
  wire [3:0] wr_ptr;
  (* src = "./src/fifo.v:35" *)
  input write;
  assign _037_ = Fifo_full |(* src = "./src/fifo.v:119|./src/fifo.v:118" *)  _033_[1];
  assign _020_[1] = data_count[2] |(* src = "./src/fifo.v:82" *)  data_count[3];
  assign _021_[0] = _020_[0] |(* src = "./src/fifo.v:82" *)  _020_[1];
  assign _020_[0] = data_count[0] |(* src = "./src/fifo.v:95" *)  data_count[1];
  assign _022_[1] = _034_[2] |(* src = "./src/fifo.v:95" *)  data_count[3];
  assign _020_[2] = data_count[4] |(* src = "./src/fifo.v:95" *)  data_count[5];
  assign _020_[3] = data_count[6] |(* src = "./src/fifo.v:95" *)  data_count[7];
  assign _023_[0] = _020_[0] |(* src = "./src/fifo.v:95" *)  _022_[1];
  assign _021_[1] = _020_[2] |(* src = "./src/fifo.v:95" *)  _020_[3];
  assign _038_ = _023_[0] |(* src = "./src/fifo.v:95" *)  _021_[1];
  assign _024_[0] = _017_[0] |(* src = "./src/fifo.v:120" *)  _035_[1];
  assign _024_[1] = wr_ptr[2] |(* src = "./src/fifo.v:120" *)  wr_ptr[3];
  assign _039_ = _024_[0] |(* src = "./src/fifo.v:120" *)  _024_[1];
  assign _025_[0] = _018_[0] |(* src = "./src/fifo.v:151" *)  _036_[1];
  assign _025_[1] = rd_ptr[2] |(* src = "./src/fifo.v:151" *)  rd_ptr[3];
  assign _040_ = _025_[0] |(* src = "./src/fifo.v:151" *)  _025_[1];
  assign _027_[0] = _026_[0] &(* src = "./src/fifo.v:86" *)  _026_[1];
  assign _028_[0] = _027_[0] &(* src = "./src/fifo.v:86" *)  _027_[1];
  assign _026_[3] = _065_[6] &(* src = "./src/fifo.v:91" *)  _065_[7];
  assign _030_[0] = _029_[0] &(* src = "./src/fifo.v:91" *)  _026_[1];
  assign _027_[1] = _026_[2] &(* src = "./src/fifo.v:91" *)  _026_[3];
  assign _031_[0] = _030_[0] &(* src = "./src/fifo.v:91" *)  _027_[1];
  assign _042_ = _066_ | _031_[0];
  assign _032_ = _021_[0] |(* src = "./src/fifo.v:78" *)  _021_[1];
  assign _041_ = ~(* src = "./src/fifo.v:78" *) _032_;
  assign _016_ = ~(* src = "./src/fifo.v:95" *) _038_;
  assign _049_ = ~(* src = "./src/fifo.v:147" *) fifo_empty;
  assign _048_ = _043_ &(* src = "./src/fifo.v:86" *)  _050_;
  assign _010_ = _044_ &(* src = "./src/fifo.v:82" *)  _032_;
  assign _015_ = _042_ &(* src = "./src/fifo.v:91" *)  _038_;
  assign _045_ = write &(* src = "./src/fifo.v:103" *)  _004_;
  assign _046_ = read &(* src = "./src/fifo.v:103" *)  _007_;
  assign _047_ = read &(* src = "./src/fifo.v:147" *)  _049_;
  assign _055_[0] = _040_ ? (* src = "./src/fifo.v:131" *) _018_[0] : 1'h0;
  assign _055_[1] = _040_ ? (* src = "./src/fifo.v:131" *) _018_[1] : 1'h0;
  assign _055_[2] = _040_ ? (* src = "./src/fifo.v:131" *) _018_[2] : 1'h0;
  assign _055_[3] = _040_ ? (* src = "./src/fifo.v:131" *) _018_[3] : 1'h0;
  assign _000_[0] = reset ? (* src = "./src/fifo.v:111" *) _054_[0] : 1'h0;
  assign _000_[1] = reset ? (* src = "./src/fifo.v:111" *) _054_[1] : 1'h0;
  assign _000_[2] = reset ? (* src = "./src/fifo.v:111" *) _054_[2] : 1'h0;
  assign _000_[3] = reset ? (* src = "./src/fifo.v:111" *) _054_[3] : 1'h0;
  assign _000_[4] = reset ? (* src = "./src/fifo.v:111" *) _054_[4] : 1'h0;
  assign _000_[5] = reset ? (* src = "./src/fifo.v:111" *) _054_[5] : 1'h0;
  assign _000_[6] = reset ? (* src = "./src/fifo.v:111" *) _054_[6] : 1'h0;
  assign _000_[7] = reset ? (* src = "./src/fifo.v:111" *) _054_[7] : 1'h0;
  assign _054_[0] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[0] : _053_[0];
  assign _054_[1] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[1] : _053_[1];
  assign _054_[2] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[2] : _053_[2];
  assign _054_[3] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[3] : _053_[3];
  assign _054_[4] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[4] : _053_[4];
  assign _054_[5] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[5] : _053_[5];
  assign _054_[6] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[6] : _053_[6];
  assign _054_[7] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) _052_[7] : _053_[7];
  assign _053_[0] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[0] : _019_[0];
  assign _053_[1] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[1] : _019_[1];
  assign _053_[2] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[2] : _019_[2];
  assign _053_[3] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[3] : _019_[3];
  assign _053_[4] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[4] : _019_[4];
  assign _053_[5] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[5] : _019_[5];
  assign _053_[6] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[6] : _019_[6];
  assign _053_[7] = _047_ ? (* src = "./src/fifo.v:127" *) data_count[7] : _019_[7];
  assign _052_[0] = _047_ ? (* src = "./src/fifo.v:147" *) _019_[0] : data_count[0];
  assign _052_[1] = _047_ ? (* src = "./src/fifo.v:147" *) _060_[1] : data_count[1];
  assign _052_[2] = _047_ ? (* src = "./src/fifo.v:147" *) _060_[2] : data_count[2];
  assign _052_[3] = _047_ ? (* src = "./src/fifo.v:147" *) _060_[3] : data_count[3];
  assign _052_[4] = _047_ ? (* src = "./src/fifo.v:147" *) _060_[4] : data_count[4];
  assign _052_[5] = _047_ ? (* src = "./src/fifo.v:147" *) _060_[5] : data_count[5];
  assign _052_[6] = _047_ ? (* src = "./src/fifo.v:147" *) _060_[6] : data_count[6];
  assign _052_[7] = _047_ ? (* src = "./src/fifo.v:147" *) _060_[7] : data_count[7];
  assign _001_[0] = reset ? (* src = "./src/fifo.v:111" *) _051_[0] : 1'h0;
  assign _001_[1] = reset ? (* src = "./src/fifo.v:111" *) _051_[1] : 1'h0;
  assign _001_[2] = reset ? (* src = "./src/fifo.v:111" *) _051_[2] : 1'h0;
  assign _001_[3] = reset ? (* src = "./src/fifo.v:111" *) _051_[3] : 1'h0;
  assign _001_[4] = reset ? (* src = "./src/fifo.v:111" *) _051_[4] : 1'h0;
  assign _001_[5] = reset ? (* src = "./src/fifo.v:111" *) _051_[5] : 1'h0;
  assign _001_[6] = reset ? (* src = "./src/fifo.v:111" *) _051_[6] : 1'h0;
  assign _001_[7] = reset ? (* src = "./src/fifo.v:111" *) _051_[7] : 1'h0;
  assign _058_[0] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) wr_ptr[0] : _057_[0];
  assign _058_[1] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) wr_ptr[1] : _057_[1];
  assign _058_[2] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) wr_ptr[2] : _057_[2];
  assign _058_[3] = _037_ ? (* src = "./src/fifo.v:119|./src/fifo.v:118" *) wr_ptr[3] : _057_[3];
  assign _051_[0] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[0] : data_out_pop[0];
  assign _051_[1] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[1] : data_out_pop[1];
  assign _051_[2] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[2] : data_out_pop[2];
  assign _051_[3] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[3] : data_out_pop[3];
  assign _051_[4] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[4] : data_out_pop[4];
  assign _051_[5] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[5] : data_out_pop[5];
  assign _051_[6] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[6] : data_out_pop[6];
  assign _051_[7] = _047_ ? (* src = "./src/fifo.v:127" *) data_out[7] : data_out_pop[7];
  assign _057_[0] = _039_ ? (* src = "./src/fifo.v:120" *) _017_[0] : 1'h0;
  assign _057_[1] = _039_ ? (* src = "./src/fifo.v:120" *) _017_[1] : 1'h0;
  assign _057_[2] = _039_ ? (* src = "./src/fifo.v:120" *) _017_[2] : 1'h0;
  assign _057_[3] = _039_ ? (* src = "./src/fifo.v:120" *) _017_[3] : 1'h0;
  assign _002_[0] = reset ? (* src = "./src/fifo.v:111" *) _056_[0] : 1'h0;
  assign _002_[1] = reset ? (* src = "./src/fifo.v:111" *) _056_[1] : 1'h0;
  assign _002_[2] = reset ? (* src = "./src/fifo.v:111" *) _056_[2] : 1'h0;
  assign _002_[3] = reset ? (* src = "./src/fifo.v:111" *) _056_[3] : 1'h0;
  assign _056_[0] = _047_ ? (* src = "./src/fifo.v:127" *) _055_[0] : rd_ptr[0];
  assign _056_[1] = _047_ ? (* src = "./src/fifo.v:127" *) _055_[1] : rd_ptr[1];
  assign _056_[2] = _047_ ? (* src = "./src/fifo.v:127" *) _055_[2] : rd_ptr[2];
  assign _056_[3] = _047_ ? (* src = "./src/fifo.v:127" *) _055_[3] : rd_ptr[3];
  assign _013_ = _048_ ? (* src = "./src/fifo.v:86" *) 1'h0 : _015_;
  assign _014_ = _015_ ? (* src = "./src/fifo.v:91" *) 1'h0 : _016_;
  assign _003_[0] = reset ? (* src = "./src/fifo.v:111" *) _058_[0] : 1'h0;
  assign _003_[1] = reset ? (* src = "./src/fifo.v:111" *) _058_[1] : 1'h0;
  assign _003_[2] = reset ? (* src = "./src/fifo.v:111" *) _058_[2] : 1'h0;
  assign _003_[3] = reset ? (* src = "./src/fifo.v:111" *) _058_[3] : 1'h0;
  assign fifo_error = reset ? (* src = "./src/fifo.v:69" *) _008_ : 1'h0;
  assign almost_full = reset ? (* src = "./src/fifo.v:69" *) _006_ : 1'h0;
  assign _005_ = _032_ ? (* src = "./src/fifo.v:78" *) _010_ : 1'h0;
  assign _006_ = _032_ ? (* src = "./src/fifo.v:78" *) _011_ : 1'h0;
  assign _004_ = reset ? (* src = "./src/fifo.v:69" *) _059_ : 1'hx;
  assign _007_ = reset ? (* src = "./src/fifo.v:69" *) _041_ : 1'hx;
  assign _059_ = _032_ ? (* src = "./src/fifo.v:78" *) _009_ : 1'h0;
  assign _011_ = _010_ ? (* src = "./src/fifo.v:82" *) 1'h0 : _013_;
  assign _009_ = _010_ ? (* src = "./src/fifo.v:82" *) 1'h0 : _012_;
  assign _012_ = _048_ ? (* src = "./src/fifo.v:86" *) 1'h0 : _014_;
  assign fifo_empty = reset ? (* src = "./src/fifo.v:69" *) _007_ : 1'h1;
  assign almost_empty = reset ? (* src = "./src/fifo.v:69" *) _005_ : 1'h0;
  assign Fifo_full = reset ? (* src = "./src/fifo.v:69" *) _004_ : 1'h0;
  assign _070_ = ~(* src = "./src/fifo.v:86" *) _068_[31];
  assign _043_ = ~(* src = "./src/fifo.v:86" *) _044_;
  assign _066_ = ~(* src = "./src/fifo.v:91" *) _067_;
  assign _050_ = ~(* src = "./src/fifo.v:91" *) _064_[31];
  (* src = "./src/fifo.v:110" *)
  DFF _212_ (
    .C(clk),
    .D(_003_[0]),
    .Q(wr_ptr[0])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _213_ (
    .C(clk),
    .D(_003_[1]),
    .Q(wr_ptr[1])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _214_ (
    .C(clk),
    .D(_003_[2]),
    .Q(wr_ptr[2])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _215_ (
    .C(clk),
    .D(_003_[3]),
    .Q(wr_ptr[3])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _216_ (
    .C(clk),
    .D(_002_[0]),
    .Q(rd_ptr[0])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _217_ (
    .C(clk),
    .D(_002_[1]),
    .Q(rd_ptr[1])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _218_ (
    .C(clk),
    .D(_002_[2]),
    .Q(rd_ptr[2])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _219_ (
    .C(clk),
    .D(_002_[3]),
    .Q(rd_ptr[3])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _220_ (
    .C(clk),
    .D(_000_[0]),
    .Q(data_count[0])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _221_ (
    .C(clk),
    .D(_000_[1]),
    .Q(data_count[1])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _222_ (
    .C(clk),
    .D(_000_[2]),
    .Q(data_count[2])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _223_ (
    .C(clk),
    .D(_000_[3]),
    .Q(data_count[3])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _224_ (
    .C(clk),
    .D(_000_[4]),
    .Q(data_count[4])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _225_ (
    .C(clk),
    .D(_000_[5]),
    .Q(data_count[5])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _226_ (
    .C(clk),
    .D(_000_[6]),
    .Q(data_count[6])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _227_ (
    .C(clk),
    .D(_000_[7]),
    .Q(data_count[7])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _228_ (
    .C(clk),
    .D(_001_[0]),
    .Q(data_out_pop[0])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _229_ (
    .C(clk),
    .D(_001_[1]),
    .Q(data_out_pop[1])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _230_ (
    .C(clk),
    .D(_001_[2]),
    .Q(data_out_pop[2])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _231_ (
    .C(clk),
    .D(_001_[3]),
    .Q(data_out_pop[3])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _232_ (
    .C(clk),
    .D(_001_[4]),
    .Q(data_out_pop[4])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _233_ (
    .C(clk),
    .D(_001_[5]),
    .Q(data_out_pop[5])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _234_ (
    .C(clk),
    .D(_001_[6]),
    .Q(data_out_pop[6])
  );
  (* src = "./src/fifo.v:110" *)
  DFF _235_ (
    .C(clk),
    .D(_001_[7]),
    .Q(data_out_pop[7])
  );
  assign _033_[1] = write ^(* src = "./src/fifo.v:119|./src/fifo.v:118" *)  1'h1;
  assign _008_ = _045_ |(* src = "./src/fifo.v:103" *)  _046_;
  assign _035_[1] = wr_ptr[1] ^(* src = "./src/fifo.v:120" *)  1'h1;
  assign _036_[1] = rd_ptr[1] ^(* src = "./src/fifo.v:151" *)  1'h1;
  assign _044_ = _070_ | _028_[0];
  assign _067_ = _050_ | _031_[0];
  assign _019_[2] = data_count[2] ^(* src = "./src/fifo.v:138|<techmap.v>:263" *)  _029_[0];
  assign _019_[3] = data_count[3] ^(* src = "./src/fifo.v:138|<techmap.v>:263" *)  _062_[2];
  assign _019_[4] = data_count[4] ^(* src = "./src/fifo.v:138|<techmap.v>:263" *)  _062_[3];
  assign _019_[5] = data_count[5] ^(* src = "./src/fifo.v:138|<techmap.v>:263" *)  _062_[4];
  assign _019_[6] = data_count[6] ^(* src = "./src/fifo.v:138|<techmap.v>:263" *)  _062_[5];
  assign _019_[7] = data_count[7] ^(* src = "./src/fifo.v:138|<techmap.v>:263" *)  _062_[6];
  assign _060_[1] = _069_[1] ^(* src = "./src/fifo.v:148|<techmap.v>:263" *)  data_count[0];
  assign _060_[2] = _034_[2] ^(* src = "./src/fifo.v:148|<techmap.v>:263" *)  _068_[1];
  assign _060_[4] = _065_[4] ^(* src = "./src/fifo.v:148|<techmap.v>:263" *)  _068_[3];
  assign _060_[5] = _065_[5] ^(* src = "./src/fifo.v:148|<techmap.v>:263" *)  _068_[4];
  assign _060_[6] = _065_[6] ^(* src = "./src/fifo.v:148|<techmap.v>:263" *)  _068_[5];
  assign _060_[7] = _065_[7] ^(* src = "./src/fifo.v:148|<techmap.v>:263" *)  _068_[6];
  assign _069_[1] = data_count[1] ^(* src = "./src/fifo.v:148|<techmap.v>:262" *)  1'h1;
  assign _065_[5] = data_count[5] ^(* src = "./src/fifo.v:148|<techmap.v>:262" *)  1'h1;
  assign _019_[0] = data_count[0] ^(* src = "./src/fifo.v:82|<techmap.v>:263" *)  1'h1;
  assign _065_[7] = data_count[7] ^(* src = "./src/fifo.v:82|<techmap.v>:262" *)  1'h1;
  assign _060_[3] = _065_[3] ^(* src = "./src/fifo.v:86|<techmap.v>:263" *)  _068_[2];
  assign _019_[1] = data_count[1] ^(* src = "./src/fifo.v:86|<techmap.v>:263" *)  data_count[0];
  assign _034_[2] = data_count[2] ^(* src = "./src/fifo.v:86|<techmap.v>:262" *)  1'h1;
  assign _065_[3] = data_count[3] ^(* src = "./src/fifo.v:86|<techmap.v>:262" *)  1'h1;
  assign _065_[4] = data_count[4] ^(* src = "./src/fifo.v:86|<techmap.v>:262" *)  1'h1;
  assign _065_[6] = data_count[6] ^(* src = "./src/fifo.v:91|<techmap.v>:262" *)  1'h1;
  assign _017_[0] = wr_ptr[0] ^(* src = "./src/fifo.v:124|./src/serieparalelo_syn.v:62|<techmap.v>:262" *)  1'h1;
  assign _017_[1] = wr_ptr[1] ^(* src = "./src/fifo.v:124|./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  wr_ptr[0];
  assign _017_[2] = wr_ptr[2] ^(* src = "./src/fifo.v:124|./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  _061_[1];
  assign _017_[3] = wr_ptr[3] ^(* src = "./src/fifo.v:124|./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  _061_[2];
  assign _018_[0] = rd_ptr[0] ^(* src = "./src/fifo.v:154|./src/serieparalelo_syn.v:62|<techmap.v>:262" *)  1'h1;
  assign _018_[1] = rd_ptr[1] ^(* src = "./src/fifo.v:154|./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  rd_ptr[0];
  assign _018_[2] = rd_ptr[2] ^(* src = "./src/fifo.v:154|./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  _063_[1];
  assign _018_[3] = rd_ptr[3] ^(* src = "./src/fifo.v:154|./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  _063_[2];
  assign _062_[3] = _071_ &(* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:221" *)  _029_[0];
  assign _071_ = data_count[3] &(* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:222" *)  data_count[2];
  assign _072_ = data_count[5] &(* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:222" *)  data_count[4];
  assign _062_[5] = _072_ &(* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:229" *)  _062_[3];
  assign _062_[2] = data_count[2] &(* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:229" *)  _029_[0];
  assign _062_[4] = data_count[4] &(* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:229" *)  _062_[3];
  assign _062_[6] = data_count[6] &(* src = "./src/fifo.v:138|<techmap.v>:260|<techmap.v>:229" *)  _062_[5];
  assign _074_ = _065_[5] &(* src = "./src/fifo.v:148|<techmap.v>:260|<techmap.v>:221" *)  data_count[4];
  assign _026_[2] = _065_[5] &(* src = "./src/fifo.v:148|<techmap.v>:260|<techmap.v>:222" *)  _065_[4];
  assign _084_ = _026_[2] &(* src = "./src/fifo.v:148|<techmap.v>:260|<techmap.v>:229" *)  _068_[3];
  assign _079_ = data_count[5] |(* src = "./src/fifo.v:148|<techmap.v>:260|<techmap.v>:221" *)  _074_;
  assign _068_[5] = _079_ |(* src = "./src/fifo.v:148|<techmap.v>:260|<techmap.v>:229" *)  _084_;
  assign _068_[2] = data_count[2] |(* src = "./src/fifo.v:148|<techmap.v>:260|<techmap.v>:229" *)  _085_;
  assign _068_[6] = data_count[6] |(* src = "./src/fifo.v:148|<techmap.v>:260|<techmap.v>:229" *)  _087_;
  assign _026_[0] = _069_[1] &(* src = "./src/fifo.v:82|<techmap.v>:260|<techmap.v>:221" *)  data_count[0];
  assign _082_ = _026_[1] &(* src = "./src/fifo.v:82|<techmap.v>:260|<techmap.v>:221" *)  _068_[1];
  assign _083_ = _027_[1] &(* src = "./src/fifo.v:82|<techmap.v>:260|<techmap.v>:221" *)  _068_[3];
  assign _087_ = _065_[6] &(* src = "./src/fifo.v:82|<techmap.v>:260|<techmap.v>:229" *)  _068_[5];
  assign _068_[1] = data_count[1] |(* src = "./src/fifo.v:82|<techmap.v>:260|<techmap.v>:221" *)  _026_[0];
  assign _068_[3] = _078_ |(* src = "./src/fifo.v:82|<techmap.v>:260|<techmap.v>:221" *)  _082_;
  assign _068_[4] = data_count[4] |(* src = "./src/fifo.v:82|<techmap.v>:260|<techmap.v>:229" *)  _086_;
  assign _026_[1] = _065_[3] &(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:222" *)  _034_[2];
  assign _085_ = _034_[2] &(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:229" *)  _068_[1];
  assign _086_ = _065_[4] &(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:229" *)  _068_[3];
  assign _068_[31] = _081_ |(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)  _083_;
  assign _029_[0] = data_count[1] &(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)  data_count[0];
  assign _076_ = _026_[3] &(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)  _079_;
  assign _080_ = data_count[7] |(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)  _075_;
  assign _064_[3] = _078_ |(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)  _030_[0];
  assign _081_ = _080_ |(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)  _076_;
  assign _064_[31] = _081_ |(* src = "./src/fifo.v:86|<techmap.v>:260|<techmap.v>:221" *)  _077_;
  assign _073_ = _065_[3] &(* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)  data_count[2];
  assign _075_ = _065_[7] &(* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)  data_count[6];
  assign _077_ = _027_[1] &(* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)  _064_[3];
  assign _078_ = data_count[3] |(* src = "./src/fifo.v:91|<techmap.v>:260|<techmap.v>:221" *)  _073_;
  assign _061_[1] = wr_ptr[1] &(* src = "./src/fifo.v:124|./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:221" *)  wr_ptr[0];
  assign _061_[2] = wr_ptr[2] &(* src = "./src/fifo.v:124|./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:229" *)  _061_[1];
  assign _063_[1] = rd_ptr[1] &(* src = "./src/fifo.v:154|./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:221" *)  rd_ptr[0];
  assign _063_[2] = rd_ptr[2] &(* src = "./src/fifo.v:154|./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:229" *)  _063_[1];
  (* src = "./src/fifo.v:49" *)
  \$paramod\memory\DATA_SIZE=8\MAIN_SIZE=4  mem (
    .clk(clk),
    .data_in(data_in_push),
    .data_out(data_out),
    .rd_ptr(rd_ptr),
    .read(read),
    .reset(reset),
    .wr_ptr(wr_ptr),
    .write(write)
  );
  assign _017_[31:5] = 27'h0000000;
  assign _018_[31:5] = 27'h0000000;
  assign _019_[31:9] = 23'h000000;
  assign { _022_[3:2], _022_[0] } = { _020_[3:2], _020_[0] };
  assign _023_[1] = _021_[1];
  assign _026_[15:4] = 12'hfff;
  assign _027_[7:2] = 6'h3f;
  assign _028_[3:1] = 3'h7;
  assign _029_[15:1] = { 12'hfff, _026_[3:1] };
  assign _030_[7:1] = { 6'h3f, _027_[1] };
  assign _031_[3:1] = 3'h7;
  assign _033_[0] = Fifo_full;
  assign { _034_[7:3], _034_[1:0] } = { data_count[7:3], data_count[1:0] };
  assign { _035_[3:2], _035_[0] } = { wr_ptr[3:2], _017_[0] };
  assign { _036_[3:2], _036_[0] } = { rd_ptr[3:2], _018_[0] };
  assign { _060_[30:8], _060_[0] } = { _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _060_[31], _019_[0] };
  assign { _061_[31:3], _061_[0] } = { 28'h0000000, _017_[4], wr_ptr[0] };
  assign { _062_[31:7], _062_[1:0] } = { 24'h000000, _019_[8], _029_[0], data_count[0] };
  assign { _063_[31:3], _063_[0] } = { 28'h0000000, _018_[4], rd_ptr[0] };
  assign { _064_[30:7], _064_[1:0] } = { _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _064_[31], _029_[0], data_count[0] };
  assign { _065_[31:8], _065_[2:0] } = { 24'hffffff, _034_[2], data_count[1:0] };
  assign { _068_[30:7], _068_[0] } = { _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], _068_[31], data_count[0] };
  assign { _069_[31:2], _069_[0] } = { 24'hffffff, _065_[7:3], _034_[2], data_count[0] };
endmodule

(* dynports =  1  *)
(* src = "./src/memory.v:12" *)
module \$paramod\memory\DATA_SIZE=8\MAIN_SIZE=4 (data_out, clk, reset, write, read, wr_ptr, rd_ptr, data_in);
  (* src = "./src/memory.v:34" *)
  wire [31:0] _000_;
  (* src = "./src/memory.v:34" *)
  wire [7:0] _001_;
  (* src = "./src/memory.v:34" *)
  wire [31:0] _002_;
  (* src = "./src/memory.v:34" *)
  (* unused_bits = "2 3" *)
  wire [3:0] _003_;
  (* src = "./src/memory.v:34" *)
  wire [7:0] _004_;
  (* src = "./src/memory.v:34" *)
  wire [7:0] _005_;
  (* src = "./src/memory.v:62" *)
  wire [7:0] _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire [7:0] _022_;
  wire [7:0] _023_;
  wire [7:0] _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire [7:0] _035_;
  wire [7:0] _036_;
  wire [7:0] _037_;
  wire [7:0] _038_;
  wire [7:0] _039_;
  wire [7:0] _040_;
  wire [7:0] _041_;
  wire [7:0] _042_;
  wire [7:0] _043_;
  wire [7:0] _044_;
  wire [7:0] _045_;
  wire [7:0] _046_;
  wire [7:0] _047_;
  wire [7:0] _048_;
  (* src = "./src/memory.v:52" *)
  wire [7:0] _049_;
  wire [7:0] _050_;
  (* unused_bits = "2 3" *)
  wire [3:0] _051_;
  (* src = "./src/memory.v:19" *)
  input clk;
  (* src = "./src/memory.v:25" *)
  input [7:0] data_in;
  (* src = "./src/memory.v:17" *)
  output [7:0] data_out;
  (* src = "./src/memory.v:31" *)
  wire [7:0] ff_mem;
  (* src = "./src/memory.v:30" *)
  wire [31:0] i;
  wire [7:0] \mem[0] ;
  wire [7:0] \mem[1] ;
  wire [7:0] \mem[2] ;
  wire [7:0] \mem[3] ;
  (* src = "./src/memory.v:24" *)
  input [3:0] rd_ptr;
  (* src = "./src/memory.v:22" *)
  input read;
  (* src = "./src/memory.v:20" *)
  input reset;
  (* src = "./src/memory.v:23" *)
  input [3:0] wr_ptr;
  (* src = "./src/memory.v:21" *)
  input write;
  assign _042_[0] = _029_ ? _000_[31] : \mem[2] [0];
  assign _042_[1] = _029_ ? _000_[31] : \mem[2] [1];
  assign _042_[2] = _029_ ? _000_[31] : \mem[2] [2];
  assign _042_[3] = _029_ ? _000_[31] : \mem[2] [3];
  assign _042_[4] = _029_ ? _000_[31] : \mem[2] [4];
  assign _042_[5] = _029_ ? _000_[31] : \mem[2] [5];
  assign _042_[6] = _029_ ? _000_[31] : \mem[2] [6];
  assign _042_[7] = _029_ ? _000_[31] : \mem[2] [7];
  assign _043_[0] = _028_ ? _000_[31] : _042_[0];
  assign _043_[1] = _028_ ? _000_[31] : _042_[1];
  assign _043_[2] = _028_ ? _000_[31] : _042_[2];
  assign _043_[3] = _028_ ? _000_[31] : _042_[3];
  assign _043_[4] = _028_ ? _000_[31] : _042_[4];
  assign _043_[5] = _028_ ? _000_[31] : _042_[5];
  assign _043_[6] = _028_ ? _000_[31] : _042_[6];
  assign _043_[7] = _028_ ? _000_[31] : _042_[7];
  assign _044_[0] = _031_ ? _022_[0] : _043_[0];
  assign _044_[1] = _031_ ? _022_[1] : _043_[1];
  assign _044_[2] = _031_ ? _022_[2] : _043_[2];
  assign _044_[3] = _031_ ? _022_[3] : _043_[3];
  assign _044_[4] = _031_ ? _022_[4] : _043_[4];
  assign _044_[5] = _031_ ? _022_[5] : _043_[5];
  assign _044_[6] = _031_ ? _022_[6] : _043_[6];
  assign _044_[7] = _031_ ? _022_[7] : _043_[7];
  assign _045_[0] = _032_ ? _000_[31] : \mem[3] [0];
  assign _045_[1] = _032_ ? _000_[31] : \mem[3] [1];
  assign _045_[2] = _032_ ? _000_[31] : \mem[3] [2];
  assign _045_[3] = _032_ ? _000_[31] : \mem[3] [3];
  assign _045_[4] = _032_ ? _000_[31] : \mem[3] [4];
  assign _045_[5] = _032_ ? _000_[31] : \mem[3] [5];
  assign _045_[6] = _032_ ? _000_[31] : \mem[3] [6];
  assign _045_[7] = _032_ ? _000_[31] : \mem[3] [7];
  assign _046_[0] = _033_ ? _000_[31] : _045_[0];
  assign _046_[1] = _033_ ? _000_[31] : _045_[1];
  assign _046_[2] = _033_ ? _000_[31] : _045_[2];
  assign _046_[3] = _033_ ? _000_[31] : _045_[3];
  assign _046_[4] = _033_ ? _000_[31] : _045_[4];
  assign _046_[5] = _033_ ? _000_[31] : _045_[5];
  assign _046_[6] = _033_ ? _000_[31] : _045_[6];
  assign _046_[7] = _033_ ? _000_[31] : _045_[7];
  assign _047_[0] = _033_ ? _000_[31] : _046_[0];
  assign _047_[1] = _033_ ? _000_[31] : _046_[1];
  assign _047_[2] = _033_ ? _000_[31] : _046_[2];
  assign _047_[3] = _033_ ? _000_[31] : _046_[3];
  assign _047_[4] = _033_ ? _000_[31] : _046_[4];
  assign _047_[5] = _033_ ? _000_[31] : _046_[5];
  assign _047_[6] = _033_ ? _000_[31] : _046_[6];
  assign _047_[7] = _033_ ? _000_[31] : _046_[7];
  assign _038_[0] = _027_ ? _022_[0] : _037_[0];
  assign _038_[1] = _027_ ? _022_[1] : _037_[1];
  assign _038_[2] = _027_ ? _022_[2] : _037_[2];
  assign _038_[3] = _027_ ? _022_[3] : _037_[3];
  assign _038_[4] = _027_ ? _022_[4] : _037_[4];
  assign _038_[5] = _027_ ? _022_[5] : _037_[5];
  assign _038_[6] = _027_ ? _022_[6] : _037_[6];
  assign _038_[7] = _027_ ? _022_[7] : _037_[7];
  assign _048_[0] = _034_ ? _022_[0] : _047_[0];
  assign _048_[1] = _034_ ? _022_[1] : _047_[1];
  assign _048_[2] = _034_ ? _022_[2] : _047_[2];
  assign _048_[3] = _034_ ? _022_[3] : _047_[3];
  assign _048_[4] = _034_ ? _022_[4] : _047_[4];
  assign _048_[5] = _034_ ? _022_[5] : _047_[5];
  assign _048_[6] = _034_ ? _022_[6] : _047_[6];
  assign _048_[7] = _034_ ? _022_[7] : _047_[7];
  assign _006_[0] = reset ? (* src = "./src/memory.v:63" *) data_out[0] : 1'h0;
  assign _006_[1] = reset ? (* src = "./src/memory.v:63" *) data_out[1] : 1'h0;
  assign _006_[2] = reset ? (* src = "./src/memory.v:63" *) data_out[2] : 1'h0;
  assign _006_[3] = reset ? (* src = "./src/memory.v:63" *) data_out[3] : 1'h0;
  assign _006_[4] = reset ? (* src = "./src/memory.v:63" *) data_out[4] : 1'h0;
  assign _006_[5] = reset ? (* src = "./src/memory.v:63" *) data_out[5] : 1'h0;
  assign _006_[6] = reset ? (* src = "./src/memory.v:63" *) data_out[6] : 1'h0;
  assign _006_[7] = reset ? (* src = "./src/memory.v:63" *) data_out[7] : 1'h0;
  assign _020_ = _005_[7] ? _003_[0] : _002_[0];
  assign _021_ = _005_[7] ? _003_[1] : _002_[0];
  assign _022_[0] = _005_[7] ? _004_[0] : _000_[31];
  assign _022_[1] = _005_[7] ? _004_[1] : _000_[31];
  assign _022_[2] = _005_[7] ? _004_[2] : _000_[31];
  assign _022_[3] = _005_[7] ? _004_[3] : _000_[31];
  assign _022_[4] = _005_[7] ? _004_[4] : _000_[31];
  assign _022_[5] = _005_[7] ? _004_[5] : _000_[31];
  assign _022_[6] = _005_[7] ? _004_[6] : _000_[31];
  assign _022_[7] = _005_[7] ? _004_[7] : _000_[31];
  assign _040_[0] = _029_ ? _000_[31] : _039_[0];
  assign _040_[1] = _029_ ? _000_[31] : _039_[1];
  assign _040_[2] = _029_ ? _000_[31] : _039_[2];
  assign _040_[3] = _029_ ? _000_[31] : _039_[3];
  assign _040_[4] = _029_ ? _000_[31] : _039_[4];
  assign _040_[5] = _029_ ? _000_[31] : _039_[5];
  assign _040_[6] = _029_ ? _000_[31] : _039_[6];
  assign _040_[7] = _029_ ? _000_[31] : _039_[7];
  assign _039_[0] = _028_ ? _000_[31] : \mem[1] [0];
  assign _039_[1] = _028_ ? _000_[31] : \mem[1] [1];
  assign _039_[2] = _028_ ? _000_[31] : \mem[1] [2];
  assign _039_[3] = _028_ ? _000_[31] : \mem[1] [3];
  assign _039_[4] = _028_ ? _000_[31] : \mem[1] [4];
  assign _039_[5] = _028_ ? _000_[31] : \mem[1] [5];
  assign _039_[6] = _028_ ? _000_[31] : \mem[1] [6];
  assign _039_[7] = _028_ ? _000_[31] : \mem[1] [7];
  assign _007_ = _005_[7] ? 1'h1 : _001_[7];
  assign data_out[0] = read ? (* src = "./src/memory.v:51" *) _049_[0] : ff_mem[0];
  assign data_out[1] = read ? (* src = "./src/memory.v:51" *) _049_[1] : ff_mem[1];
  assign data_out[2] = read ? (* src = "./src/memory.v:51" *) _049_[2] : ff_mem[2];
  assign data_out[3] = read ? (* src = "./src/memory.v:51" *) _049_[3] : ff_mem[3];
  assign data_out[4] = read ? (* src = "./src/memory.v:51" *) _049_[4] : ff_mem[4];
  assign data_out[5] = read ? (* src = "./src/memory.v:51" *) _049_[5] : ff_mem[5];
  assign data_out[6] = read ? (* src = "./src/memory.v:51" *) _049_[6] : ff_mem[6];
  assign data_out[7] = read ? (* src = "./src/memory.v:51" *) _049_[7] : ff_mem[7];
  assign _041_[0] = _030_ ? _022_[0] : _040_[0];
  assign _041_[1] = _030_ ? _022_[1] : _040_[1];
  assign _041_[2] = _030_ ? _022_[2] : _040_[2];
  assign _041_[3] = _030_ ? _022_[3] : _040_[3];
  assign _041_[4] = _030_ ? _022_[4] : _040_[4];
  assign _041_[5] = _030_ ? _022_[5] : _040_[5];
  assign _041_[6] = _030_ ? _022_[6] : _040_[6];
  assign _041_[7] = _030_ ? _022_[7] : _040_[7];
  assign _037_[0] = _026_ ? _000_[31] : _036_[0];
  assign _037_[1] = _026_ ? _000_[31] : _036_[1];
  assign _037_[2] = _026_ ? _000_[31] : _036_[2];
  assign _037_[3] = _026_ ? _000_[31] : _036_[3];
  assign _037_[4] = _026_ ? _000_[31] : _036_[4];
  assign _037_[5] = _026_ ? _000_[31] : _036_[5];
  assign _037_[6] = _026_ ? _000_[31] : _036_[6];
  assign _037_[7] = _026_ ? _000_[31] : _036_[7];
  assign _036_[0] = _026_ ? _000_[31] : _035_[0];
  assign _036_[1] = _026_ ? _000_[31] : _035_[1];
  assign _036_[2] = _026_ ? _000_[31] : _035_[2];
  assign _036_[3] = _026_ ? _000_[31] : _035_[3];
  assign _036_[4] = _026_ ? _000_[31] : _035_[4];
  assign _036_[5] = _026_ ? _000_[31] : _035_[5];
  assign _036_[6] = _026_ ? _000_[31] : _035_[6];
  assign _036_[7] = _026_ ? _000_[31] : _035_[7];
  assign _035_[0] = _025_ ? _000_[31] : \mem[0] [0];
  assign _035_[1] = _025_ ? _000_[31] : \mem[0] [1];
  assign _035_[2] = _025_ ? _000_[31] : \mem[0] [2];
  assign _035_[3] = _025_ ? _000_[31] : \mem[0] [3];
  assign _035_[4] = _025_ ? _000_[31] : \mem[0] [4];
  assign _035_[5] = _025_ ? _000_[31] : \mem[0] [5];
  assign _035_[6] = _025_ ? _000_[31] : \mem[0] [6];
  assign _035_[7] = _025_ ? _000_[31] : \mem[0] [7];
  assign _002_[0] = reset ? (* src = "./src/memory.v:35" *) 1'hx : 1'h1;
  assign _001_[7] = ~(* src = "./src/memory.v:35" *) reset;
  assign _000_[31] = reset ? (* src = "./src/memory.v:35" *) 1'hx : 1'h0;
  assign _050_[0] = write ? (* src = "./src/memory.v:41" *) data_in[0] : 1'hx;
  assign _050_[1] = write ? (* src = "./src/memory.v:41" *) data_in[1] : 1'hx;
  assign _050_[2] = write ? (* src = "./src/memory.v:41" *) data_in[2] : 1'hx;
  assign _050_[3] = write ? (* src = "./src/memory.v:41" *) data_in[3] : 1'hx;
  assign _050_[4] = write ? (* src = "./src/memory.v:41" *) data_in[4] : 1'hx;
  assign _050_[5] = write ? (* src = "./src/memory.v:41" *) data_in[5] : 1'hx;
  assign _050_[6] = write ? (* src = "./src/memory.v:41" *) data_in[6] : 1'hx;
  assign _050_[7] = write ? (* src = "./src/memory.v:41" *) data_in[7] : 1'hx;
  assign _005_[7] = reset ? (* src = "./src/memory.v:35" *) write : 1'h0;
  assign _024_[0] = rd_ptr[0] ? \mem[3] [0] : \mem[2] [0];
  assign _024_[1] = rd_ptr[0] ? \mem[3] [1] : \mem[2] [1];
  assign _024_[2] = rd_ptr[0] ? \mem[3] [2] : \mem[2] [2];
  assign _024_[3] = rd_ptr[0] ? \mem[3] [3] : \mem[2] [3];
  assign _024_[4] = rd_ptr[0] ? \mem[3] [4] : \mem[2] [4];
  assign _024_[5] = rd_ptr[0] ? \mem[3] [5] : \mem[2] [5];
  assign _024_[6] = rd_ptr[0] ? \mem[3] [6] : \mem[2] [6];
  assign _024_[7] = rd_ptr[0] ? \mem[3] [7] : \mem[2] [7];
  assign _004_[0] = reset ? (* src = "./src/memory.v:35" *) _050_[0] : 1'hx;
  assign _004_[1] = reset ? (* src = "./src/memory.v:35" *) _050_[1] : 1'hx;
  assign _004_[2] = reset ? (* src = "./src/memory.v:35" *) _050_[2] : 1'hx;
  assign _004_[3] = reset ? (* src = "./src/memory.v:35" *) _050_[3] : 1'hx;
  assign _004_[4] = reset ? (* src = "./src/memory.v:35" *) _050_[4] : 1'hx;
  assign _004_[5] = reset ? (* src = "./src/memory.v:35" *) _050_[5] : 1'hx;
  assign _004_[6] = reset ? (* src = "./src/memory.v:35" *) _050_[6] : 1'hx;
  assign _004_[7] = reset ? (* src = "./src/memory.v:35" *) _050_[7] : 1'hx;
  assign _023_[0] = rd_ptr[0] ? \mem[1] [0] : \mem[0] [0];
  assign _023_[1] = rd_ptr[0] ? \mem[1] [1] : \mem[0] [1];
  assign _023_[2] = rd_ptr[0] ? \mem[1] [2] : \mem[0] [2];
  assign _023_[3] = rd_ptr[0] ? \mem[1] [3] : \mem[0] [3];
  assign _023_[4] = rd_ptr[0] ? \mem[1] [4] : \mem[0] [4];
  assign _023_[5] = rd_ptr[0] ? \mem[1] [5] : \mem[0] [5];
  assign _023_[6] = rd_ptr[0] ? \mem[1] [6] : \mem[0] [6];
  assign _023_[7] = rd_ptr[0] ? \mem[1] [7] : \mem[0] [7];
  assign _051_[0] = write ? (* src = "./src/memory.v:41" *) wr_ptr[0] : 1'hx;
  assign _051_[1] = write ? (* src = "./src/memory.v:41" *) wr_ptr[1] : 1'hx;
  assign _003_[0] = reset ? (* src = "./src/memory.v:35" *) _051_[0] : 1'hx;
  assign _003_[1] = reset ? (* src = "./src/memory.v:35" *) _051_[1] : 1'hx;
  assign _049_[0] = rd_ptr[1] ? _024_[0] : _023_[0];
  assign _049_[1] = rd_ptr[1] ? _024_[1] : _023_[1];
  assign _049_[2] = rd_ptr[1] ? _024_[2] : _023_[2];
  assign _049_[3] = rd_ptr[1] ? _024_[3] : _023_[3];
  assign _049_[4] = rd_ptr[1] ? _024_[4] : _023_[4];
  assign _049_[5] = rd_ptr[1] ? _024_[5] : _023_[5];
  assign _049_[6] = rd_ptr[1] ? _024_[6] : _023_[6];
  assign _049_[7] = rd_ptr[1] ? _024_[7] : _023_[7];
  assign _019_ = ~_021_;
  assign _018_ = ~_020_;
  assign _017_ = ~_002_[0];
  assign _008_ = ~_000_[31];
  DFF _243_ (
    .C(clk),
    .D(_044_[0]),
    .Q(\mem[2] [0])
  );
  DFF _244_ (
    .C(clk),
    .D(_044_[1]),
    .Q(\mem[2] [1])
  );
  DFF _245_ (
    .C(clk),
    .D(_044_[2]),
    .Q(\mem[2] [2])
  );
  DFF _246_ (
    .C(clk),
    .D(_044_[3]),
    .Q(\mem[2] [3])
  );
  DFF _247_ (
    .C(clk),
    .D(_044_[4]),
    .Q(\mem[2] [4])
  );
  DFF _248_ (
    .C(clk),
    .D(_044_[5]),
    .Q(\mem[2] [5])
  );
  DFF _249_ (
    .C(clk),
    .D(_044_[6]),
    .Q(\mem[2] [6])
  );
  DFF _250_ (
    .C(clk),
    .D(_044_[7]),
    .Q(\mem[2] [7])
  );
  DFF _251_ (
    .C(clk),
    .D(_038_[0]),
    .Q(\mem[0] [0])
  );
  DFF _252_ (
    .C(clk),
    .D(_038_[1]),
    .Q(\mem[0] [1])
  );
  DFF _253_ (
    .C(clk),
    .D(_038_[2]),
    .Q(\mem[0] [2])
  );
  DFF _254_ (
    .C(clk),
    .D(_038_[3]),
    .Q(\mem[0] [3])
  );
  DFF _255_ (
    .C(clk),
    .D(_038_[4]),
    .Q(\mem[0] [4])
  );
  DFF _256_ (
    .C(clk),
    .D(_038_[5]),
    .Q(\mem[0] [5])
  );
  DFF _257_ (
    .C(clk),
    .D(_038_[6]),
    .Q(\mem[0] [6])
  );
  DFF _258_ (
    .C(clk),
    .D(_038_[7]),
    .Q(\mem[0] [7])
  );
  DFF _259_ (
    .C(clk),
    .D(_048_[0]),
    .Q(\mem[3] [0])
  );
  DFF _260_ (
    .C(clk),
    .D(_048_[1]),
    .Q(\mem[3] [1])
  );
  DFF _261_ (
    .C(clk),
    .D(_048_[2]),
    .Q(\mem[3] [2])
  );
  DFF _262_ (
    .C(clk),
    .D(_048_[3]),
    .Q(\mem[3] [3])
  );
  DFF _263_ (
    .C(clk),
    .D(_048_[4]),
    .Q(\mem[3] [4])
  );
  DFF _264_ (
    .C(clk),
    .D(_048_[5]),
    .Q(\mem[3] [5])
  );
  DFF _265_ (
    .C(clk),
    .D(_048_[6]),
    .Q(\mem[3] [6])
  );
  DFF _266_ (
    .C(clk),
    .D(_048_[7]),
    .Q(\mem[3] [7])
  );
  (* src = "./src/memory.v:62" *)
  DFF _267_ (
    .C(clk),
    .D(_006_[0]),
    .Q(ff_mem[0])
  );
  (* src = "./src/memory.v:62" *)
  DFF _268_ (
    .C(clk),
    .D(_006_[1]),
    .Q(ff_mem[1])
  );
  (* src = "./src/memory.v:62" *)
  DFF _269_ (
    .C(clk),
    .D(_006_[2]),
    .Q(ff_mem[2])
  );
  (* src = "./src/memory.v:62" *)
  DFF _270_ (
    .C(clk),
    .D(_006_[3]),
    .Q(ff_mem[3])
  );
  (* src = "./src/memory.v:62" *)
  DFF _271_ (
    .C(clk),
    .D(_006_[4]),
    .Q(ff_mem[4])
  );
  (* src = "./src/memory.v:62" *)
  DFF _272_ (
    .C(clk),
    .D(_006_[5]),
    .Q(ff_mem[5])
  );
  (* src = "./src/memory.v:62" *)
  DFF _273_ (
    .C(clk),
    .D(_006_[6]),
    .Q(ff_mem[6])
  );
  (* src = "./src/memory.v:62" *)
  DFF _274_ (
    .C(clk),
    .D(_006_[7]),
    .Q(ff_mem[7])
  );
  DFF _275_ (
    .C(clk),
    .D(_041_[0]),
    .Q(\mem[1] [0])
  );
  DFF _276_ (
    .C(clk),
    .D(_041_[1]),
    .Q(\mem[1] [1])
  );
  DFF _277_ (
    .C(clk),
    .D(_041_[2]),
    .Q(\mem[1] [2])
  );
  DFF _278_ (
    .C(clk),
    .D(_041_[3]),
    .Q(\mem[1] [3])
  );
  DFF _279_ (
    .C(clk),
    .D(_041_[4]),
    .Q(\mem[1] [4])
  );
  DFF _280_ (
    .C(clk),
    .D(_041_[5]),
    .Q(\mem[1] [5])
  );
  DFF _281_ (
    .C(clk),
    .D(_041_[6]),
    .Q(\mem[1] [6])
  );
  DFF _282_ (
    .C(clk),
    .D(_041_[7]),
    .Q(\mem[1] [7])
  );
  assign _012_ = _000_[31] & _017_;
  assign _014_ = _018_ & _021_;
  assign _031_ = _014_ & _007_;
  assign _027_ = _010_ & _007_;
  assign _032_ = _000_[31] & _001_[7];
  assign _015_ = _002_[0] & _000_[31];
  assign _033_ = _015_ & _001_[7];
  assign _016_ = _020_ & _021_;
  assign _034_ = _016_ & _007_;
  assign _030_ = _013_ & _007_;
  assign _013_ = _020_ & _019_;
  assign _029_ = _012_ & _001_[7];
  assign _028_ = _011_ & _001_[7];
  assign _011_ = _002_[0] & _008_;
  assign _010_ = _018_ & _019_;
  assign _026_ = _009_ & _001_[7];
  assign _009_ = _017_ & _008_;
  assign _025_ = _008_ & _001_[7];
  assign _000_[30:0] = { _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31] };
  assign _001_[6:0] = { _001_[7], _001_[7], _001_[7], _001_[7], _001_[7], _001_[7], _001_[7] };
  assign _002_[31:1] = { _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31], _000_[31] };
  assign _005_[6:0] = { _005_[7], _005_[7], _005_[7], _005_[7], _005_[7], _005_[7], _005_[7] };
  assign i = 32'd4;
endmodule

(* dynports =  1  *)
(* top =  1  *)
(* src = "./src/disp2.v:13" *)
module device2_syn(out0, out1, almost_full_f0, almost_full_f1, pop_0, pop_1, clk, clk8f, reset, in0, in1, empty0, empty1, fifo_almost_empty0, fifo_almost_empty1);
  (* src = "./src/disp2.v:151" *)
  wire _00_;
  (* src = "./src/disp2.v:151" *)
  wire _01_;
  (* src = "./src/disp2.v:136" *)
  wire _02_;
  (* src = "./src/disp2.v:142" *)
  wire _03_;
  (* src = "./src/disp2.v:21" *)
  output almost_full_f0;
  (* src = "./src/disp2.v:22" *)
  output almost_full_f1;
  (* src = "./src/disp2.v:26" *)
  input clk;
  (* src = "./src/disp2.v:27" *)
  input clk8f;
  (* src = "./src/disp2.v:31" *)
  input empty0;
  (* src = "./src/disp2.v:32" *)
  input empty1;
  (* src = "./src/disp2.v:33" *)
  input fifo_almost_empty0;
  (* src = "./src/disp2.v:34" *)
  input fifo_almost_empty1;
  (* src = "./src/disp2.v:29" *)
  input in0;
  (* src = "./src/disp2.v:30" *)
  input in1;
  (* src = "./src/disp2.v:49" *)
  wire n_almost_full0;
  (* src = "./src/disp2.v:49" *)
  wire n_almost_full1;
  (* src = "./src/disp2.v:51" *)
  (* unused_bits = "0" *)
  wire n_fifo_empty0;
  (* src = "./src/disp2.v:51" *)
  (* unused_bits = "0" *)
  wire n_fifo_empty1;
  (* src = "./src/disp2.v:56" *)
  wire [7:0] n_outF0;
  (* src = "./src/disp2.v:57" *)
  wire [7:0] n_outF1;
  (* src = "./src/disp2.v:52" *)
  (* unused_bits = "0" *)
  wire nn_Fifo_full0;
  (* src = "./src/disp2.v:52" *)
  (* unused_bits = "0" *)
  wire nn_Fifo_full1;
  (* src = "./src/disp2.v:44" *)
  (* unused_bits = "0" *)
  wire nn_active0;
  (* src = "./src/disp2.v:44" *)
  (* unused_bits = "0" *)
  wire nn_active1;
  (* src = "./src/disp2.v:50" *)
  (* unused_bits = "0" *)
  wire nn_almost_empty0;
  (* src = "./src/disp2.v:50" *)
  (* unused_bits = "0" *)
  wire nn_almost_empty1;
  (* src = "./src/disp2.v:53" *)
  (* unused_bits = "0" *)
  wire nn_fifo_error0;
  (* src = "./src/disp2.v:53" *)
  (* unused_bits = "0" *)
  wire nn_fifo_error1;
  (* src = "./src/disp2.v:43" *)
  (* unused_bits = "0" *)
  wire nn_valid0;
  (* src = "./src/disp2.v:43" *)
  (* unused_bits = "0" *)
  wire nn_valid1;
  (* src = "./src/disp2.v:19" *)
  output [7:0] out0;
  (* src = "./src/disp2.v:20" *)
  output [7:0] out1;
  (* src = "./src/disp2.v:46" *)
  wire [7:0] out_sp0;
  (* src = "./src/disp2.v:47" *)
  wire [7:0] out_sp1;
  (* src = "./src/disp2.v:23" *)
  output pop_0;
  (* src = "./src/disp2.v:24" *)
  output pop_1;
  (* src = "./src/disp2.v:38" *)
  wire read0;
  (* src = "./src/disp2.v:39" *)
  wire read1;
  (* src = "./src/disp2.v:28" *)
  input reset;
  assign read0 = ~(* src = "./src/disp2.v:136" *) _02_;
  assign read1 = ~(* src = "./src/disp2.v:142" *) _03_;
  assign _00_ = reset ? (* src = "./src/disp2.v:153" *) read0 : 1'h0;
  assign _01_ = reset ? (* src = "./src/disp2.v:153" *) read1 : 1'h0;
  (* src = "./src/disp2.v:151" *)
  DFF _08_ (
    .C(clk),
    .D(_00_),
    .Q(pop_0)
  );
  (* src = "./src/disp2.v:151" *)
  DFF _09_ (
    .C(clk),
    .D(_01_),
    .Q(pop_1)
  );
  assign _02_ = empty0 |(* src = "./src/disp2.v:159" *)  fifo_almost_empty0;
  assign _03_ = empty1 |(* src = "./src/disp2.v:165" *)  fifo_almost_empty1;
  (* src = "./src/disp2.v:88" *)
  \$paramod\fifo_4x8_syn\DATA_SIZE=8\MAIN_SIZE=4  fifo_4x8_0 (
    .Fifo_full(nn_Fifo_full0),
    .almost_empty(nn_almost_empty0),
    .almost_full(n_almost_full0),
    .clk(clk8f),
    .data_in_push(out_sp0),
    .data_out_pop(n_outF0),
    .fifo_empty(n_fifo_empty0),
    .fifo_error(nn_fifo_error0),
    .read(read0),
    .reset(reset),
    .write(pop_0)
  );
  (* src = "./src/disp2.v:105" *)
  \$paramod\fifo_4x8_syn\DATA_SIZE=8\MAIN_SIZE=4  fifo_4x8_1 (
    .Fifo_full(nn_Fifo_full1),
    .almost_empty(nn_almost_empty1),
    .almost_full(n_almost_full1),
    .clk(clk8f),
    .data_in_push(out_sp1),
    .data_out_pop(n_outF1),
    .fifo_empty(n_fifo_empty1),
    .fifo_error(nn_fifo_error1),
    .read(read1),
    .reset(reset),
    .write(pop_1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/disp2.v:62" *)
  serieparalelo_syn serie_paralelo_0 (
    .active(nn_active0),
    .clk(clk),
    .clk8f(clk8f),
    .in(in0),
    .out(out_sp0),
    .reset(reset),
    .valid(nn_valid0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/disp2.v:75" *)
  serieparalelo_syn serie_paralelo_1 (
    .active(nn_active1),
    .clk(clk),
    .clk8f(clk8f),
    .in(in1),
    .out(out_sp1),
    .reset(reset),
    .valid(nn_valid1)
  );
  assign almost_full_f0 = n_almost_full0;
  assign almost_full_f1 = n_almost_full1;
  assign out0 = n_outF0;
  assign out1 = n_outF1;
endmodule

(* src = "./src/serieparalelo_syn.v:23" *)
module serieparalelo_syn(in, clk8f, clk, reset, out, valid, active);
  (* src = "./src/serieparalelo_syn.v:52" *)
  wire [3:0] _000_;
  (* src = "./src/serieparalelo_syn.v:52" *)
  wire [7:0] _001_;
  (* src = "./src/serieparalelo_syn.v:41" *)
  wire [7:0] _002_;
  (* src = "./src/serieparalelo_syn.v:52" *)
  wire _003_;
  (* src = "./src/serieparalelo_syn.v:52" *)
  wire _004_;
  (* src = "./src/serieparalelo_syn.v:62" *)
  (* unused_bits = "4" *)
  wire [31:0] _005_;
  wire [7:0] _006_;
  wire [3:0] _007_;
  wire [1:0] _008_;
  wire [15:0] _009_;
  wire [7:0] _010_;
  wire _011_;
  (* src = "./src/serieparalelo_syn.v:69" *)
  wire _012_;
  wire [7:0] _013_;
  wire [3:0] _014_;
  wire [3:0] _015_;
  (* src = "./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _016_;
  (* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  (* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:221" *)
  wire _022_;
  (* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:221" *)
  wire _023_;
  (* src = "./src/serieparalelo_syn.v:37" *)
  wire [3:0] BC_counter;
  (* src = "./src/serieparalelo_syn.v:33" *)
  output active;
  (* src = "./src/serieparalelo_syn.v:28" *)
  input clk;
  (* src = "./src/serieparalelo_syn.v:27" *)
  input clk8f;
  (* src = "./src/serieparalelo_syn.v:26" *)
  input in;
  (* src = "./src/serieparalelo_syn.v:31" *)
  output [7:0] out;
  (* src = "./src/serieparalelo_syn.v:36" *)
  wire [7:0] register;
  (* src = "./src/serieparalelo_syn.v:29" *)
  input reset;
  (* src = "./src/serieparalelo_syn.v:32" *)
  output valid;
  assign _006_[0] = _009_[0] &(* src = "./src/serieparalelo_syn.v:88" *)  _009_[1];
  assign active = _020_ | _006_[0];
  assign _008_[1] = _007_[2] |(* src = "./src/serieparalelo_syn.v:60" *)  _007_[3];
  assign _007_[0] = register[0] |(* src = "./src/serieparalelo_syn.v:69" *)  register[1];
  assign _007_[1] = _010_[2] |(* src = "./src/serieparalelo_syn.v:69" *)  _010_[3];
  assign _007_[2] = _010_[4] |(* src = "./src/serieparalelo_syn.v:69" *)  _010_[5];
  assign _007_[3] = register[6] |(* src = "./src/serieparalelo_syn.v:69" *)  _010_[7];
  assign _008_[0] = _007_[0] |(* src = "./src/serieparalelo_syn.v:69" *)  _007_[1];
  assign _011_ = _008_[0] |(* src = "./src/serieparalelo_syn.v:69" *)  _008_[1];
  assign _009_[0] = _005_[0] &(* src = "./src/serieparalelo_syn.v:88" *)  _018_[1];
  assign _012_ = active &(* src = "./src/serieparalelo_syn.v:69" *)  _011_;
  assign _015_[0] = _011_ ? (* src = "./src/serieparalelo_syn.v:60" *) BC_counter[0] : _014_[0];
  assign _015_[1] = _011_ ? (* src = "./src/serieparalelo_syn.v:60" *) BC_counter[1] : _014_[1];
  assign _015_[2] = _011_ ? (* src = "./src/serieparalelo_syn.v:60" *) BC_counter[2] : _014_[2];
  assign _015_[3] = _011_ ? (* src = "./src/serieparalelo_syn.v:60" *) BC_counter[3] : _014_[3];
  assign _002_[0] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) in : 1'h0;
  assign _002_[1] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) register[0] : 1'h0;
  assign _002_[2] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) register[1] : 1'h0;
  assign _002_[3] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) register[2] : 1'h0;
  assign _002_[4] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) register[3] : 1'h0;
  assign _002_[5] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) register[4] : 1'h0;
  assign _002_[6] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) register[5] : 1'h0;
  assign _002_[7] = reset ? (* src = "./src/serieparalelo_syn.v:42" *) register[6] : 1'h0;
  assign _014_[0] = active ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[0] : _005_[0];
  assign _014_[1] = active ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[1] : _005_[1];
  assign _014_[2] = active ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[2] : _005_[2];
  assign _014_[3] = active ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[3] : _005_[3];
  assign _000_[0] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _015_[0] : 1'h0;
  assign _000_[1] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _015_[1] : 1'h0;
  assign _000_[2] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _015_[2] : 1'h0;
  assign _000_[3] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _015_[3] : 1'h0;
  assign _001_[0] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[0] : 1'h0;
  assign _001_[1] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[1] : 1'h0;
  assign _001_[2] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[2] : 1'h0;
  assign _001_[3] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[3] : 1'h0;
  assign _001_[4] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[4] : 1'h0;
  assign _001_[5] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[5] : 1'h0;
  assign _001_[6] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[6] : 1'h0;
  assign _001_[7] = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _013_[7] : 1'h0;
  assign _003_ = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _004_ : valid;
  assign _013_[0] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[0] : out[0];
  assign _013_[1] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[1] : out[1];
  assign _013_[2] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[2] : out[2];
  assign _013_[3] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[3] : out[3];
  assign _013_[4] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[4] : out[4];
  assign _013_[5] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[5] : out[5];
  assign _013_[6] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[6] : out[6];
  assign _013_[7] = _004_ ? (* src = "./src/serieparalelo_syn.v:76" *) register[7] : out[7];
  assign _004_ = reset ? (* src = "./src/serieparalelo_syn.v:53" *) _012_ : 1'hx;
  assign _020_ = ~(* src = "./src/serieparalelo_syn.v:88" *) _021_;
  assign _019_ = ~(* src = "./src/serieparalelo_syn.v:88" *) _017_[31];
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _075_ (
    .C(clk),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _076_ (
    .C(clk),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _077_ (
    .C(clk),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _078_ (
    .C(clk),
    .D(_000_[3]),
    .Q(BC_counter[3])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _079_ (
    .C(clk),
    .D(_001_[0]),
    .Q(out[0])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _080_ (
    .C(clk),
    .D(_001_[1]),
    .Q(out[1])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _081_ (
    .C(clk),
    .D(_001_[2]),
    .Q(out[2])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _082_ (
    .C(clk),
    .D(_001_[3]),
    .Q(out[3])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _083_ (
    .C(clk),
    .D(_001_[4]),
    .Q(out[4])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _084_ (
    .C(clk),
    .D(_001_[5]),
    .Q(out[5])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _085_ (
    .C(clk),
    .D(_001_[6]),
    .Q(out[6])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _086_ (
    .C(clk),
    .D(_001_[7]),
    .Q(out[7])
  );
  (* src = "./src/serieparalelo_syn.v:52" *)
  DFF _087_ (
    .C(clk),
    .D(_003_),
    .Q(valid)
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _088_ (
    .C(clk8f),
    .D(_002_[0]),
    .Q(register[0])
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _089_ (
    .C(clk8f),
    .D(_002_[1]),
    .Q(register[1])
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _090_ (
    .C(clk8f),
    .D(_002_[2]),
    .Q(register[2])
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _091_ (
    .C(clk8f),
    .D(_002_[3]),
    .Q(register[3])
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _092_ (
    .C(clk8f),
    .D(_002_[4]),
    .Q(register[4])
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _093_ (
    .C(clk8f),
    .D(_002_[5]),
    .Q(register[5])
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _094_ (
    .C(clk8f),
    .D(_002_[6]),
    .Q(register[6])
  );
  (* src = "./src/serieparalelo_syn.v:41" *)
  DFF _095_ (
    .C(clk8f),
    .D(_002_[7]),
    .Q(register[7])
  );
  assign _018_[1] = BC_counter[1] ^(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:262" *)  1'h1;
  assign _018_[3] = BC_counter[3] ^(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:262" *)  1'h1;
  assign _005_[1] = BC_counter[1] ^(* src = "./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  BC_counter[0];
  assign _005_[2] = BC_counter[2] ^(* src = "./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  _016_[1];
  assign _005_[3] = BC_counter[3] ^(* src = "./src/serieparalelo_syn.v:62|<techmap.v>:263" *)  _016_[2];
  assign _005_[0] = BC_counter[0] ^(* src = "./src/serieparalelo_syn.v:62|<techmap.v>:262" *)  1'h1;
  assign _022_ = _018_[1] &(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:221" *)  _017_[0];
  assign _023_ = _009_[1] &(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:221" *)  _017_[1];
  assign _009_[1] = _018_[3] &(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:222" *)  BC_counter[2];
  assign _017_[0] = BC_counter[0] |(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:212" *)  _005_[0];
  assign _017_[1] = BC_counter[1] |(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:221" *)  _022_;
  assign _017_[31] = BC_counter[3] |(* src = "./src/serieparalelo_syn.v:88|<techmap.v>:260|<techmap.v>:221" *)  _023_;
  assign _016_[1] = BC_counter[1] &(* src = "./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:221" *)  BC_counter[0];
  assign _016_[2] = BC_counter[2] &(* src = "./src/serieparalelo_syn.v:62|<techmap.v>:260|<techmap.v>:229" *)  _016_[1];
  assign _010_[2] = register[2] ^(* src = "./src/serieparalelo_syn.v:69" *)  1'h1;
  assign _010_[3] = register[3] ^(* src = "./src/serieparalelo_syn.v:69" *)  1'h1;
  assign _010_[4] = register[4] ^(* src = "./src/serieparalelo_syn.v:69" *)  1'h1;
  assign _010_[5] = register[5] ^(* src = "./src/serieparalelo_syn.v:69" *)  1'h1;
  assign _010_[7] = register[7] ^(* src = "./src/serieparalelo_syn.v:69" *)  1'h1;
  assign _021_ = _019_ | _006_[0];
  assign _005_[31:5] = 27'h0000000;
  assign _006_[7:1] = 7'h7f;
  assign _009_[15:2] = 14'h3fff;
  assign { _010_[6], _010_[1:0] } = { register[6], register[1:0] };
  assign { _016_[31:3], _016_[0] } = { 28'h0000000, _005_[4], BC_counter[0] };
  assign _017_[30:3] = { _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31] };
  assign { _018_[31:4], _018_[2], _018_[0] } = { 28'hfffffff, BC_counter[2], _005_[0] };
endmodule
